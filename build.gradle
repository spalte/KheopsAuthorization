plugins {
    id "org.sonarqube" version "2.6"
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.9"
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: "jacoco"
apply from: 'https://raw.github.com/gretty-gradle-plugin/gretty/master/pluginScripts/gretty.plugin'


// Enable debugging of gretty started webapp in IDEA
// For debuging a gradle task, IDEA creates a gradle init script (in /tmp/ijinit#.gradle), that sets JVM arguments
// to enable remote debugging.
// Unfortunately by default that only works for gradle tasks that implement JavaForkOptions - which gretty doesn't do.
// So parse the JVM args that IDEA uses from that init script and set them as JVM args to be used by gretty:
def debugArgs = []
if (gradle.startParameter.initScripts) {
    def line = file(gradle.startParameter.initScripts[0]).readLines().findAll({ x -> x ==~ /.*-agentlib:jdwp=.*/ })[0]
    if (line) {
        //noinspection GroovyAssignabilityCheck
        debugArgs = ((line =~ /.*'(.*)'.*/)[0][1] as String).split(' ')
    }
}

repositories {
    mavenCentral()

    maven {
        //noinspection GroovyAssignabilityCheck
        url "https://www.dcm4che.org/maven2/"
    }
}


dependencies {
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: '2.26'
    compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.26'
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-moxy', version: '2.26'

    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.46'

    compile group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.2.Final'
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.16.Final'
    compile group: 'org.hibernate', name: 'hibernate-java8', version: '5.2.16.Final'
    compile group: 'org.hibernate', name: 'hibernate-c3p0', version: '5.2.16.Final'

    compile group: 'com.auth0', name: 'java-jwt', version: '3.3.0'
    compile group: 'com.auth0', name: 'jwks-rsa', version: '0.3.0'

    // https://mvnrepository.com/artifact/org.jooq/jooq
    compile group: 'org.jooq', name: 'jooq', version: '3.11.2'
    // https://mvnrepository.com/artifact/org.jooq/jooq-meta
    compile group: 'org.jooq', name: 'jooq-meta', version: '3.11.2'
    // https://mvnrepository.com/artifact/org.jooq/jooq-codegen
    compile group: 'org.jooq', name: 'jooq-codegen', version: '3.11.2'



    compile (group: 'org.dcm4che', name: 'dcm4che-dcmr', version: '5.13.0') {
        exclude module: 'slf4j-log4j12'
    }
    compile (group: 'org.dcm4che', name: 'dcm4che-json', version: '5.13.0') {
        exclude module: 'slf4j-log4j12'
    }

    compile group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.25'

    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    )
}

querydsl {
    jpa = true
}

gretty {
    jvmArgs = [*debugArgs]

    httpPort = 7575
    contextPath = ''
    servletContainer = 'tomcat8'

    contextConfigFile = 'tomcat-config.xml'
}

test {
    useJUnitPlatform()
}
